[{"content":"Задача Спроектировать сервис со следующими свойствами:\n обмен между фронтендом и прикладной логикой может осуществляеться через шину доступный извне АПИ и структура обмена данными документируются программно клиенты могут работать по протоколам SOAP, JSON, Websockets сервис поддерживает метрики (prometheus) и трассировку (jaeger)  Технические особенности решения  Формат описания сервиса: protobuf Шина: nats-streaming Базовый протокол взаимодействия: gRPC  Структура сервиса Компоненты сервиса Внешние интерфейсы  HTML Frontend - страницы вебсайта JSON API / Swagger - доступ к АПИ для собственного и клиентского javascript, см. grpc-gateway WebSocket - работа в режиме \u0026ldquo;1 соединение - 1 запрос\u0026rdquo; позволяет использовать документацию JSON API, см. также - grpc-websocket-proxy SOAP - gRPC proxy + генерация WSDL, см. soap-proxy  Генерируемый код  JSON proxy - конвертация запросов JSON в gRPC WS proxy - конвертирует (на лету) запросы по протоколу ws в JSON API SOAP proxy - WSDL + конвертация SOAP-запросов в запросы gRPC gRPC Server - сервис получает gRPC запросы и передает их в соответствующий gRPC handler MQ Client - заменяет gRPC handler и передает запросы в MQ MQ handler - получает запросы из MQ и передает их в соответствующий gRPC handler [docs.proto.html] - документация по файлу main.proto, см. protoc-gen-doc  Используемое ПО  PG - Postgresql - СУБД, которая неизбежно будет использоваться как минимум до миграции всего старого кода MQ (RPC, pub/sub) - шина с поддержкой RPC и pub/sub, для которой есть библиотеки интеграции с gRPC, например NATS и AMQP. Я начинал с Rabbit, но в конфигурации по умолчанию он даже при бездействии давал избыточную нагрузку на CPU, поэтому дальнейшая разработка велась с nats-streaming. Однако, даже в первом приближении есть альтернативы Trace server (Jaeger) - тут не будет привязки к конкретной реализации, т.к. jaeger использует opentracing  Универсальный код собственной разработки  Template renderer - формирование html из шаблонов с возможностью вызова методов gRPC PG NOTIFY -\u0026gt; gRPC Message proxy - конверсия событий PG по заданному .proto и передача (publish) их в NATS  Код, реализующий конкретный сервис  service.proto - спецификация конкретного сервиса, для сервисов, основанных на прикладной логике в хранимом коде БД, в перспективе может генерироваться по описаниям функций Postgresql [Templates] - HTML-разметка страниц web-интерфейса с данными, полученными из вызовов gRPC-методов gRPC Handler - прикладная логика сервиса PG client - методы, вызывающие хранимый код, в перспективе могут генерироваться по описаниям функций Postgresql  Пилотная версия  [Демо-сайт] Исходный код прототипа Библиотеки общего назначения Генераторы proxy  Комментарии к выбранным технологиям RPC Главная цель проектируемого решения - избавиться от устаревших (CGI / SUXX / mod_perl) технологий и построить работу на новом стеке, чтобы можно было переделывать подсистемы в предсказуемые сроки (без реверс-инжиниринга) и набирать под этот стек персонал. Один из трех используемых в текущей системе фреймворков (PGWS, в продакшене с 2010г) основан на RPC. Если мы перенесем на RPC остальной код, цель уже можно считать, в целом, достигнутой. Дополнительно, новое решение, будучи близким к PGWS, позволит использовать уже проверенные практикой решения с минимальными изменениями.\nProtobuf Протокол сериализации (передачи) структурированных данных от Google, доступный c 2008г. На текущий момент этот протокол продолжает развиваться и можно предположить, что для наших задач он уже вполне готов.\nВыбор этого протокола для межсервисного обмена позволяет\n разрабатывать клиентскую и серверную часть параллельно после готовности .proto файла на этапе компиляции выявлять ошибки, связанные с межсервисным взаимодействием релизить новую версию сервиса без модификации клиентов  gRPC Уровень текущей поддержки стандарта gRPC сообществом позволяет избежать затрат на собственную реализацию (как минимум, в первом приближении) интерфейсов для клиентов, обмена по шине и прочих некритичных для прикладных задач вопросов\nMQ-RPC  Взаимодействие между фронтендом и прикладной логикой через шину позволяет в процессе эксплуатации без участия разработчиков менять соотношение \u0026ldquo;фронтенды:обработчики\u0026rdquo; для нагруженных сервисов. Реализация MQ-клиента с сигнатурой gRPC-обработчика позволяет, для ненагруженных сервисов, убрать MQ из цепочки и вызывать gRPC-обработчик непосредственно из gRPC-сервера (красная стрелка \u0026ldquo;Вариант без MQ RPC\u0026rdquo; на схеме). Т.е. такой вариант использования шины не добавляет ее в число зависимостей.  Gateway (Hub) и масштабирование Вопросы маршрутизации и масштабирования сервисов не требуют проработки на первом этапе, т.к. планируется иметь несколько точек масштабирования (далее - ТМ) и будет использовано стороннее ПО. Первично ситуация видится такой:\n Каждый сервис (версия сервиса) обслуживает некоторый адрес ://host/prefix Клиенты обращаются по этому адресу по протоколу http/https/ws[/gRPC] (ТМ-1) Маппинг запроса на исполнителя (или пул исполнителей) осуществляется сторонним ПО (nginx/traefik/HAproxy) (ТМ-2) Отправленный в MQ запрос может попадать к одному из нескольких обработчиков, при этом один это будет сервер или несколько - определяется функционалом MQ (ТМ-3) Отправленный в БД запрос может направляться к одному из шардов (одной из реплик) БД  Swagger (openapi) Выбран потому, что это - один из стандартных способов построения интерфейсов для HTTP клиентов (любых, не только javascript) и позволяет встроить вызов АПИ даже без использования каких-либо фреймворков (пример вызова: curl -X POST http://localhost:8081/v1/sample/ping)\nПо аналогичным причинам не был выбран Google gRPC-Web - на клиенте необходима js-библиотека и на сервере - envoy/nginx. В прототипе этапа 1 клиентский код работы через websockets - 89 строк без зависимостей.\nSOAP У нас есть клиенты, для которых этот интерфейс востребован и они пока не позволяют нам от него отказаться. В текущей версии ТПро этот функционал реализован в PGWS как прокси к JSON API. В новой архитектуре предложено аналогичное решение (т.е. его тоже не надо колировать) с тем отличием, что WSDL теперь генерится программно, а не руками, как в PGWS\nTrace server (Jaeger) Целесообразность собрать в одном месте журналы и тайминги всех подсистем, участвующих в обработке клиентских запросов, очевидна изначально. Раньше у нас не было такого места, сейчас есть такие решения, как jaeger, и логично реализовывать их поддержку с самого начала.\nСвязанность сервисов Если сервис А использует функционал сервиса Б, эта связь может быть реализована одним из способов:\n Генерация через шину - программная генерация клиентской (А) и серверной (Б) части для отправки в шину сообщений заданного protobuf формата и прием сообщений в этом формате Примитив через шину - п.1. только без автогенерации - ручное формирование и парсинг сообщений через шину сервисом А Генерация gRPC - обмен через gRPC посредством программно сгенерированных по .proto клиента (А) и сервера (Б) на заданном языке Генерация JSON - обмен через HTTP/JSON посредством программно сгенерированных по .proto клиента (А) и сервера (Б) на заданном языке Примитив через JSON - ручное формирование и парсинг JSON сообщений сервисом А  Для обмена между микросервисами можно использовать любой протокол из списка\n MQ gRPC JSON / Websockets SOAP  Перспективы На основе проекта pgmig можно построить решение, которое запросит в БД описания хранимых функций и по ним сгенерит файл .proto и pg-клиента для сервиса предложенной архитектуры. В результате разработка сервисов будет аналогична PGWS и сведется к\n созданию пакета в БД верстке страницы и ее js-коду  Это позволит перенести в новую архитектуру экспертизу текущего проекта.\nВопросы и ответы 1. Не выйдет ли по данному архитектурному решению так, что во главе всего станет база или какой-то из микросервисов, который будет диктовать \"правила игры\" другим микросервисам? Нет, Правила игры - это формат обмена между сервисами. Варианты обмена перечислены в п. \"Связанность сервисов\"  2. При таком подходе - возможно ли разработка отдельных микросервисов разными командами, на разных технологиях? Да. См. п. \"Связанность сервисов\"  3. Как продолжение предыдущего вопроса - по технике - смогут ли решения от этих разных команд отгружаться на бой в разное время, в разном объеме независимо друг от друга? Да, кроме прочего, protobuf позволяет добавления в структуры новых версий сервера без изменения (и перекомпиляции) клиентов. Однако, может иметь смысл перед релизом сервиса протестировать его внутренних клиентов. Это включает задачу \"определить всех внутренних клиентов заданного сервиса\". В предлагаемой архитектуре эта задача сводится к определению сервисов, использующих файл .proto заданного сервиса.  ","description":"Архитектура сервисов, использующих gRPC","id":0,"section":"projects","tags":null,"title":"gRPC","uri":"https://lekovr.github.io/projects/grpc-arch/"},{"content":"   Github enfist     Назначение хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ   Использование в составе dcape   Docker apisite/enfist    Сервис enfist создавался как составная часть проекта dcape, включен в его состав в 2018м году, и с того времени находится в продакшене. Описание работы с enfist включено в документацию dcape.\nЕсли коротко, то приложение позволяет работать со списком и содержимым файлов конфигурации через web-интерфейс и через API, при этом документация к API генерируется программно.\nЕсли посмотреть на исходный код, то можно увидеть там только SQL, js и статику, которые реализуют бизнес-логику (модуль pomasql/enfist) и интерфейс (в static/ и tmpl/). Для того, чтобы из этого получить работающий сервис, используется фреймфорк apisite.\nТ.о., проект решает две задачи\n функциональную - сервис хранения конфигураций для CI/CD системы демонстрационную - как пример использующего БД golang-сервиса с API, для создания которого не понадобилось писать код на golang  ","description":"хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ","id":1,"section":"projects","tags":null,"title":"enfist","uri":"https://lekovr.github.io/projects/enfist/"},{"content":"   Github narra     Назначение сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам   Использование в составе dcape   Docker dopos/narra    Сервис narra создавался как составная часть проекта dcape и они вместе с 2017 г находятся в продакшене. Описание работы с narra включено в документацию dcape.\nВ dcape v1 для ограничения доступа к внутренним ресурсам использовался nginx auth_request, функционал которого реализован в narra и дал три первые буквы в название проекта.\nВ dcape v2 для этих задач используется traefik forward-auth и необходимый для этого функционал OAuth2 прокси был добавлен в narra.\nПричина, по которой narra был доработан, а не заменен на сторонний сервис вроде этого, заключалась в необходимости разрешить доступ не просто зарегистрированному пользователю, а только пользователю, включенному в заданную группу, и OAuth2 прокси с поддержкой такого функционала к ноябрю 2020г найдено не было.\nКроме этого, в проект был добавлен HTTP-сервер для публичной и приватной статики (что позволило в базовой конфигурации dcape отказаться от nginx).\n","description":"сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам","id":2,"section":"projects","tags":null,"title":"narra","uri":"https://lekovr.github.io/projects/narra/"},{"content":"   Github LeKovr/webtail     Назначение Публикация изменений (журнальных) файлов через websocket   Docker ghcr.io/lekovr/webtail    webtail - это веб-сервис и golang-пакет, предназначенные для публикации изменений постоянно дополняемых файлов (например - журналов) по протоколу websocket с доступом через браузер.\nСервис webtail использован в составе первой версии dcape для доступа к журналам развертывания приложений, в версии 2 эта информация доступна через portainer.\nВ начале 2021г у меня появилась возможность сделать рефакторинг исходного кода, доделать документацию и довести покрытие тестами до 77%, это пока удалось только для этого \u0026ldquo;вторичного pet-проекта\u0026rdquo;.\n","description":"Публикация изменений (журнальных) файлов через websocket","id":3,"section":"projects","tags":null,"title":"webtail","uri":"https://lekovr.github.io/projects/webtail/"},{"content":"Вводная На двух предыдущих местах работы у меня были подчиненные в должности \u0026ldquo;SQL-разработчик\u0026rdquo; и я видел, что могут такие ресурсы. Но, в обоих случаях (как и в остальных), вопросы надежности и эффективности работы СУБД оставляли желать лучшего. Далее - о том, как бы я это чинил.\nСтратегия Администрирование БД - тиражируемая задача. Вариант \u0026ldquo;научить своего\u0026rdquo; не окупится, имеет смысл привлечь тех, кто такие задачи решает постоянно. При качественных решениях, потребность в них будет со временем уменьшаться\nРазработка БД - это отдельная экспертиза. Знать, где что (из всего) лежит и отвечать за оптимальность чтения/записи данных - с некоторой точки в развитии проекта не сможет даже специально выделенный под это сотрудник. Надо быть готовым к тому, что будет подразделение таких спецов.\nБыть экспертом в ОС или ЯП - недостаточно для экспертизы в БД. SQL от этого почти так же далек, как 1C или Clarion\nЧто бы пробовал я В нашей стране есть эксперты, я бы попробовал их привлечь за бюджет одного-двух \u0026ldquo;DBA\u0026rdquo; (для начала).\nКак пример:\n что добавляют к мейнстриму как помогают  Еще вариант (где мог бы пригодиться \u0026ldquo;DBA\u0026rdquo;) - мониторить такие ресурсы как\n https://planet.postgresql.org/ https://www.depesz.com/  , находить там полезное и тратить время на внедрение этого в проекте\n","description":"Мой план по работе с Postgresql","id":4,"section":"notes","tags":null,"title":"Готовим Postgresql","uri":"https://lekovr.github.io/notes/pg_cooking/"},{"content":"Получилось сформулировать ответ на вопрос \u0026ldquo;Почему я топлю за opensource?\u0026rdquo;. Делюсь им.\nОчевидные плюсы Наличие у компании проектов с открытым исходным кодом позволяет\n показать кандидатам уровень команды предложить кандидатам поучаствовать (да хоть бы и за оплату решения issue) без заморочек с NDA посмотреть на уровень кандидата из его PR  Лично я бы на такое пошел даже без оплаты, потому что\n в opensource-проекте мой коммит навсегда останется моим и пойдет мне в зачет (в т.ч. когда ИИ научится нанимать прогеров по результатам анализа их коммитов на гитхабе) я получу инфу о нанимателе более ценную, чем потраченное время  Личный кейс Исходя из варианта, когда есть pet-проекты и любимая работа, возможна (и случалась) ситуация, когда слияние потребностей первого и второго приведет к идее о некоторой библиотеке, которая\n пригодится нанимателю пригодится в моих проектах  Как поступить в таком случае?\n написать код за деньги нанимателя, отдать ему права и забрать себе слегка переделанную копию сделать за выходные и выложить в опенсорс, а наниматель пусть сам решает сделать пилот за выходные, объяснить тему нанимателю и дальше поддерживать в рабочее время  Вот я бы предпочел вариант 3, потому что это дает обоюдопозитивный шанс решением проблемы одной стороны предвосхитить появление аналогичной проблемы у другой.\nКак это разрулить нанимателю - предложить заказчику вариант вроде \u0026ldquo;мы напишем этот код за 10% его стоимости, но выложим в опенсорс, что позволит взять остальные 90% с других 9и клиентов\u0026rdquo;\nPS. по-прежнему интересно, существуют ли еще люди, которые смотрят на это похоже ;-)\n","description":"Зачем публиковать исходный код","id":5,"section":"notes","tags":null,"title":"opensource","uri":"https://lekovr.github.io/notes/opensource/"},{"content":"Занимаюсь ИТ профессионально с 1994г, имею опыт руководства командами реализации и сопровождения таких проектов, как биллинг телеком-оператора, платформа электронной торговли и др. Работаю исключительно дистанционно с 2010г.\nКлючевые навыки  организация эффективного процесса разработки с участием программистов, аналитиков, QA и SRE проектирование, реализация и сопровождение решений, использующих PoGoDo  Под моим руководством создавали и поддерживали программные продукты команды специалистов по\n разработке БД (хранимый код postgresql) разработке фронтенда (js, jquery, rеасt) администрированию (linux, docker) тестированию сопровождению  Опыт работы 06.2022 — настоящее время Разработчик/тех-лид/архитектор в PoGoDo проектах на договорной основе.\n05.2021 - 05.2022, ГК Иннотех, лид команды golang-разработчиков  реверс-инжиниринг, анализ и устранение проблемных мест микросервисов в продакшене координация и участие в планировании работ команды разработки (программисты, тестировщики, аналитик) проектирование новых сервисов и доработок существующих  09.2009 - 08.2020, ТендерПро, начальник отдела ИТ Обязанности  координация работы команды в целях сохранения работоспособности legacy-продукта и сохранения объема доработок разработка архитектуры новых подсистем + создание MVP внедрение технологий CI/CD для legacy-продукта на основе docker руководство ИТ подразделениями компании:  группа сопровождения и развития проекта www.tender.pro (реrl, sql, js) группа back-end разработки (sql) группа front-end разработки (js, jquery, rеасt) группа администрирования (linux, docker, dcape)    Личные достижения Организационные\n 10+ лет прода создание и обеспечение деятельности квалифицированной команды без текучки кадров подготовка решения по переходу c perl на golang с сохранением текущей команды  Технические\n 2020, rpc-sample-app - сервис с фронтендом (gRPC/JSON/Websockets/SOAP), вызывающий бэкенд напрямую или через NATS 2017, dbrpc - слой бэкенда тендерной системы, вышедшей в прод, я реализовал golang-подсистему и был лидом sql-команды 2010, PGWS. JSON-RPC интерфейс к хранимым процедурам БД (PostgreSQL/plpgsql, реrl, jаvаsсript)  08.2002 - 09.2009, Южный Телеком, начальник отдела биллинга Руководство группой разработки и эксплуатации биллинговой системы телеком-оператора, решающей задачи:\n проектирование и разработка ПО для тарификации услуг телеком-оператора (PostgreSQL, реrl, bash) разработка подсистем тарификации трафика клиентов (NetFlow, Radius) тарификация партнерского трафика и обнаружение ошибок в партнерских системах тарификации (PostgreSQL) разработка коннекторов к новому оборудованию (реrl, C) подготовка отчетности и разработка новых отчетных форм (mod_реrl)  Личные достижения  Вместе с командой спроектировал, реализовал и поддерживал 5+ лет биллинговую систему телеком-оператора  Opensource Хобби-проекты, которые я придумал и развиваю в свободное время:\n dopos - Настройка и развёртывание docker-приложений на выделенном сервере (docker, make, golang, gitea, traefik, postgresql) pgmig - Пакетная загрузка SQL (миграции) в БД (golang, postgresql) procapi - API к хранимым процедурам Postgresql (golang) apisite - Фреймворк на основе procapi и apitpl (golang)  Полный список проектов: github.com/LeKovr\nДругие проекты  2019, Миграция хранимого кода Оrасlе -\u0026gt; Postgresql (разработчик в составе команды, plpgsql) 2018, Бэкенд аналитики блокчейн бирж (разработчик в составе команды, golang) 2016, Портал авторизации по СМС для Wi-Fi клиентов оператора связи (архитектор и разработчик, golang, jаvаsсript, sqlite)  Личные предпочтения Дистанционная работа на личной технике с Linux.\nhttps://lekovr.github.io/cv_cto/\n","description":"Резюме Алексея Коврижкина для должности начальника отдела разработки ПО","id":6,"section":"","tags":null,"title":"Алексей Коврижкин, начальник отдела разработки ПО","uri":"https://lekovr.github.io/cv_cto/"},{"content":"Мой Чек-лист вакансии Если я прохожу интервью и звучат слова \u0026ldquo;а есть ли у Вас какие-то вопросы?\u0026rdquo;, я открываю эту страницу и зачитываю те пункты, которые на этот момент еще актуальны.\n1. Тесты  процент покрытия (для пилота / для прода) как сделаны интеграционные тесты? используется ли в тестах docker?  2. Техдокументация  кто пишет? на каком этапе?  3. SQL  какая СУБД? как производятся миграции? есть ли хранимый код и для чего?  4. Опенсорс  пишется ли открытый код? есть ли у вашей команды репы на гитхабе? есть ли личные репы у потенциальных коллег?  5. Организация работы  какой используется диспетчер задач? попадают ли автоматом в задачу связанные с ней коммиты? возникает ли необходимость править непокрытый тестами код, для которого нет документации? место Agile в вашем техпроцессе по шкале от \u0026ldquo;работаем по всем пунктам\u0026rdquo; до \u0026ldquo;если присмотреться, у нас похожее\u0026rdquo;?  6. Девопс  есть ли кубер и насколько разработка в него погружается? есть ли service discovery? есть ли в деплое контроль версий связанных микросервисов?  7. Коллектив  сколько программистов? какие еще должности участвуют в техпроцессе? есть ли отдельное подразделение эксплуатации и каковы его функции есть ли отдельное подразделение девопс? какая численность остального участвующего в процессе персонала по группам обязаностей? сколько времени в неделю занимает общение голосом? видео?  ","description":"Вопросы нанимателю","id":7,"section":"notes","tags":null,"title":"Чек-лист вакансии","uri":"https://lekovr.github.io/notes/vacancy_checklist/"},{"content":" Работа с удовольствием добавляет совершенство в ее результат\n  Аристотель\n  Роли Архитектор / Разработчик проектов, использующих\n postgresql golang docker  Занимаюсь ИТ профессионально с 1994г, специализируюсь на бэкенде и имею опыт в администрировании linux/docker и задачах фронтенда (html/vanilla js).\nНе ограничиваюсь кодированием по ТЗ и стараюсь сделать все возможное для успеха проекта в целом.\nВ командах занимал роли от разработчика до архитектора и тимлида.\nOpensource В свободное время и в рамках проектов я участвую в opensource и публикую код тут - github.com/LeKovr.\nРезультаты после 2012 года может быть удобнее смотреть на codersrank. Этот ресурс я использую для информации о том, сколько и какого кода отдано в opensource, объем коммитов сути сделанного не релевантен. Тем более, что SQL они не считали и в какой-то момент убрали статистику про docker-compose.\nМой выбор  postgresql - после Оrасlе я увидел СУБД, которая мотивирует не закапываться в лишнее, а делать именно то, для чего, на мой взгляд, SQL и хранимый код наиболее эффективны golang - в 98м я выбрал реrl из-за CPAN. Обилие современных библиотек, линтеры и генераторы - причина моего выбора golang в 2015м docker - когда он вышел в опенсорс, такие решения как сhеf, аnsiblе, рuрреt, на мой взгляд, потеряли актуальность. Все можно сделать проще. Для сложного есть k8s и созданные для (а не допиленные под) него инструменты удаленка - я работаю дистанционно с 2006г, для меня умение получить нужный результат от сотрудника на удаленке - одно из ключевых требований к нанимателю  Ключевые навыки  postgresql (с 1999) golang (с 2015) docker (с 2014) jаvаsсript (с 1999) linux (с 1998)  Также имею реализованные проекты с использованием\n Реrl (1999 - 2015) Dеlphi (1998 - 1999) Оrаclе PL/SQL (1997 - 1999) PАL/QBЕ (1994 - 1997) С (1994 - 1995, 2002) Pаsсаl (1990 - 1993)  Что ищу IT-команду, которая\n сопровождает бизнес, привносящий в этот мир что-то материальное и(или) полезное реализовывает проекты с длительным жизненным циклом практикует участие в opensource (в моем личном субъективном мире, в 2021м году, вакансия гофера без ссылки на публичные проекты нанимателя не заслуживает серьезного отношения) имеет в составе сотрудников на удаленке использует linux как основную ОС  Я бы предпочел начинать общение с новой командой с обсуждения её и моих opensoure-проектов.\nPS. а если есть проект, посвященный интеграции хранимого кода postgresql, golang и grpc - я был бы рад добавить в него свои экспертизу и ресурс.\nЧто не ищу  проекты, связанные со спамом, азартными играми и т.п. компанию галеру, которая сводит разработчиков с заказчиком ради процента за сам факт и организацию процесса. команду, которая не готова к Makefile, git submodule, plpgsql митинги по графику без реальной темы варианты с релокацией за пределы ЮФО РФ (кроме Японии)  Идеальный HR Представим, что есть некая команда гоферов, которой понадобилось расширение. В моем представлении, это, в идеале, могло бы выглядеть так:\n у команды есть проект и он использует (импортирует) внешние opensource go-пакеты в этом проекте есть полезный функционал, не связанный с бизнес-логикой напрямую признательность за первое (в части внешних) и осознание второго вывело команду на публикацию функционала общего назначения и проведение доработок через, скажем, \u0026ldquo;github issues\u0026rdquo; hr (тут по контексту - строчные) или кто-то из команды где-то ищет гоферов и пишет им коротко - \u0026ldquo;мы готовы платить до ХХ в час, вот список issues. Если Вас заинтересует и Ваш MR примем - готовы обсудить ставку\u0026rdquo;  Возможно ли такое вообще и, если - да, то - сколько еще ждать?)\nКак работаю Моя специализация - полный цикл разработки программных продуктов, от бизнес-идеи до постпродакшена.\nВ идеале, этот процесс может выглядеть так:\n Есть бизнес-задача и эксперт в предметной области Я подключаюсь и решаю технические вопросы:   архитектура решения необходимые технологии и сторонние приложения  Я делаю прототип Производится его оценка, формируется план дальнейших работ и привлекаются необходимые (IT) ресурсы Согласно плана, выпускается продукт К моменту перехода проекта в стабильный продакшен с обновлениями, я завершаю подготовку команды специалистов, способных его поддерживать без разрушения функциональности, и могу переключиться на следующий проект  Моя задача - получить качественное программное решение бизнес-задачи. Т.к. математическое моделирование и основы БД мне знакомы с ВУЗа, обычно такие решения потом работают годами и требуют поддержки только в рамках изменений первоначальных требований.\nПримеры моих решений Эти проекты были мной спроектированы и доведены до продакшена. Моя роль в них - архитектор, ключевой разработчик. В двух первых еще - тимлид\n бэкенд тендерной системы биллинг оператора фиксированной связи сайты публикации прайс-листов для региональной газеты и фармацевтической компании расчет и консолидация экономических показателей филиалов банка  Как отдыхаю Хобби-проекты, которые я придумал и развиваю в свободное время:\n dopos - Настройка и развёртывание docker-приложений на выделенном сервере (docker, make, golang, gitea, traefik, postgresql) pgmig - Пакетная загрузка SQL (миграции) в БД (golang, postgresql) procapi - API к хранимым процедурам Postgresql (golang) apisite - Фреймворк на основе procapi и apitpl (golang)  И, конечно, за пределами IT тоже есть жизнь. До декабря 2016го меня увлекали велосипед и стендовая стрельба, а потом мы переехали из Краснодара в Ставрополь, потом в Ростов, потом еще ближе ;) В итоге, с осени 2019го мы снимаем дом, где я включаю в отдых настольный теннис, пневматику, работы в саду, мангал, бассейн и \u0026ldquo;пора покатать форика\u0026rdquo;\nПредпочтения  начало работы - участие в открытом проекте, использующем golang и(или) postgresql формат работы - дистанционная (работаю так с 2006г) ОС - linux, начал использовать в 1998г, перестал использовать другие ОС в 2002г язык программирования - golang, в 2015м я перешел на него с реrl и с этого времени все, что не sql и bash, пишу на golang  Заинтересован в участии в проектах, использующих golang совместно с postgresql.\nОпыт работы ИП Индивидуальный предприниматель\nИюнь 2022 — настоящее время Разработчик/тех-лид/архитектор в PoGoDo проектах на договорной основе.\nТимлид golang ГК Иннотех\nОктябрь 2021 — Май 2022. Руководитель группы разработки  реверс-инжиниринг, анализ и устранение проблемных мест микросервисов в продакшене координация и участие в планировании работ команды разработки (программисты, тестировщики, аналитик) проектирование новых сервисов и доработок существующих  Май - Октябрь 2021. Старший разработчик  создание новых сервисов (GRPC/TWIRP + Postgresql) сопровождение существующих сервисов  ИП Индивидуальный предприниматель\nСентябрь 2020 — Май 2021 Результаты завершенных проектов позволили мне взять 6+ месяцев отпуска для личных дел и работы над pet-проектами:\n   Проект Характер работ     dcape Переезд используемого traefik с v1 на v2, рефакторинг проекта   dopos Адаптация темы hugo и создание сайта документации   webtail рефакторинг go-кода, документирование и покрытие тестами   mqbridge рефакторинг go-кода, документирование и покрытие тестами    Май 2015 — Август 2020 Основным заказчиком в этот период была моя прошлая работа - компания tender.pro. Для неё я решал (и решил) следующие задачи\n разработка архитектуры новых подсистем + создание MVP  rpc-sample-app - сервис с фронтендом (gRPC/JSON/Websockets/SOAP), вызывающий бэкенд напрямую или через NATS (+ rpckit), мой вариант миграции legacy в 2020м году sfs - мой вариант архитектуры файл-сервера grpc-sample - начальная архитектура gRPC API dbrpc - слой бэкенда тендерной системы, вышедшей в прод, я реализовал golang-подсистему и был лидом sql-команды   координация работы команды в целях сохранения работоспособности legacy-продукта и сохранения объема доработок внедрение технологий CI/CD для legacy-продукта (я внедрил техпроцесс на основе docker (dcape) для mod_perl-1.24 и двухэтапную систему релизов)  Кроме этого, принимал участие в проектах\nКак разработчик в составе команды\n 2019, Миграция хранимого кода Оrасlе -\u0026gt; Postgresql (plpgsql) 2018, Бэкенд аналитики блокчейн бирж (golang)  Как архитектор и разработчик\n 2016, Портал авторизации по СМС для Wi-Fi клиентов оператора связи (golang, jаvаsсript, sqlite) 2015, Генератор сайта магазина по xls и md, универсальный API обработки заказов (golang)  MVP Другие темы, которыми я занимался на уровне пилотов или подготовки к продакшену\n 2020, logbase, сервис для размещения в БД Postgresql структурированных журнальных файлов (golang, postgresql) 2020, siwemon, пример построения графиков мониторинга по данным webtail 2019, pgmig. библиотека и утилита загрузки SQL в postgresql (golang, postgresql) 2019, fiwes. Сервис формирования превью изображений 2018, apisite. SQL API для шаблонов и внешних клиентов (golang, postgresql) 2018, poma. Makefile для загрузки SQL в БД (make, postgresql) 2017, metricinc. Сервис сбора инкрементных метрик (golang, grpc, boltdb, docker)  Все работы выполнялись дистанционно.\nНачальник отдела ИТ (tender.pro) Октябрь 2009 — май 2015\nООО ТендерПро, Москва\nРуководство ИТ подразделениями компании\n группа сопровождения и развития проекта www.tender.pro (реrl, sql, js) группа back-end разработки (sql) группа front-end разработки (js, jquery, rеасt) группа администрирования  Дистанционная работа\nЛичные достижения\n 2010-2012 Спроектировал и вывел в прод АПИ для сайта и клиентов (plpgsql, реrl, jQuеry) 2013, Генератор сайта магазина по xls и md (реrl) 2012, formEV. Плагин jQuеry для просмотра/редактирования форм (jаvаsсript) 2010, PGWS. JSON-RPC интерфейс к хранимым процедурам БД (PostgreSQL/plpgsql, реrl, jаvаsсript)  MVP Другие темы, которыми я занимался на уровне пилотов или подготовки к продакшену\n 2012, Прототип Удостоверяющего Центра ЭЦП, сервер и клиент (реrl, bash) 2009, CCE. Эмулятор работы колл-центра, по заказу ОСС (PostgreSQL/plpgsql, OpenOffice.org Base)  Fullstack (реrl) программист (tender.pro) Август 2006 — октябрь 2009\nООО ТендерПро, Москва\nДистанционная работа в составе отдела разработки интернет-проекта.\nПерсональные задачи:\n доработка текущего, проектирование и разработка новых версий ядра системы (mod_реrl, PostgreSQL) проектирование, разработка и сопровождение подсистемы тарификации клиентов на основе очереди задач (реrl, plpgsql)  Тимлид биллинга (телеком) Руководитель группы разработки и сопровождения АСР (Автоматизированной Системы Расчетов)\nАвгуст 2002 — сентябрь 2009\nЮжный Телеком, Краснодар\nРуководство группой разработки и эксплуатации биллинговой системы телеком-оператора.\nПервоначальные задачи включали проектирование и разработку систем тарификации и их эксплуатацию, впоследствии добавились задачи эксплуатации внешних систем, построения и развития комплексного решения.\nС ростом круга решаемых задач менялась структура отвечающего за них подразделения и c 2004г его штат составлял 5 человек.\nЗадачи отдела:\n проектирование и разработка ПО для тарификации услуг телеком-оператора (PostgreSQL, реrl, bash) разработка подсистем тарификации трафика клиентов (VoIP, NetFlow, Radius) тарификация партнерского трафика и обнаружение ошибок в партнерских системах тарификации (PostgreSQL) разработка коннекторов к новому оборудованию (реrl, C) подготовка отчетности и разработка новых отчетных форм (mod_реrl)  Личные достижения\n Спроектировал и реализовал при участии команды биллинговую систему телеком-оператора  Проекты Проекты, которые находились (или находятся) в продакшене более года\n 2005, Тарификация звонков в реальном времени с поддержкой кредитов и абонплат (PostgreSQL/plpgsql, gnu-Radius) 2003, Биллинг телеком-оператора (mod_реrl, PostgreSQL/plpgsql)  MVP Другие темы, которыми я занимался на уровне пилотов или подготовки к продакшену\n 2008, JAST::Wiki. Система поддержки документации (mod_реrl) 2004, OverSSI. Конфигурируемый через SSI web-интерфейс к БД (mod_реrl, PostgreSQL/plpgsql) 2002, Библиотека построения диаграмм по XML спецификации (Linux, C, libxml, libgd2)  Fullstack+admin (фарма-опт) WWW-программист, системный администратор\nИюнь 1999 — июль 2002\nФармацевтическая компания \u0026ldquo;Фарма плюс\u0026rdquo;, Краснодар\nПерсональные задачи:\n перевод компании на использование открытого ПО в части работы с интернет разработка сервиса публикации прайс-листов (HTML::Mason) программирование системы offline-заказов (jаvаsсript, реrl, email) проектирование отказоустойчивого решения для корпоративного сайта (slave frontend - Apache, rsync) построение и администрирование решения для корпоративного доступа в интернет (firewall, email, proxy - Linux)  Проекты Проекты, которые находились (или находятся) в продакшене более года\n 2001, Сервис публикации прайс-листов для региональной газеты (www.price.kuban.su) и фармацевтической компании (www.farma.ru) (mod_реrl, HTML::Mason, PostgreSQL) 2000, Миграция интернет-сервисов торговой компании на linux (apache, bind, proftpd, iptables, sendmail, dovecot etc)  Программист (банк) Главный специалист отдела программирования АСУ\nАвгуст 1994 — июнь 1999\nАкционерный банк \u0026ldquo;КубаньБанк\u0026rdquo;, Краснодар\nРазработка систем поддержки принятия решений для отделов планирования (головной банк и филиалы):\n проектирование и разработка решений по анализу деятельности банка (Oracle, Crystal Reports) подготовка балансовой отчетности для РКЦ (Paradox) расчет аналитических показателей по пользовательским параметрам (Paradox) агрегация данных филиалов (результаты расчетов и журналы ошибок) (Paradox)  Личные достижения\n 1999, Система учета движения товаров и услуг для сервисной фирмы (Delphi, Crystal Reports, MS Access) 1996, Система расчета и консолидации экономических показателей филиалов банка (Borland Paradox/PAL) 1997, Клиент/серверная версия системы анализа баланса банка (Oracle,PL/SQL, Delphi, Sybase Power Designer)  Образование Высшее, 1989-1994, Кубанский Госуниверситет, Краснодар. Факультет прикладной математики\nЯзыки  Русский — родной Английский — читаю профессиональную литературу  Увлечения  велосипед стендовая стрельба (скит) путешествия (Токио, Париж, Флоренция)  Личные данные  23.10.1972 ak+cv@elfire.ru github.com/LeKovr  http://lekovr.github.io/cv/\n","description":"Резюме","id":8,"section":"","tags":null,"title":"Резюме","uri":"https://lekovr.github.io/cv/"},{"content":"Ниже приведены мои варианты решения типовых задач, которые у меня возникали при разработке на golang.\nfunc main() Пока я не нашел удобный способ тестировать main(), мой вариант - сократить эту функцию до одной строки и убрать ее из тестов.\nЕсли репозиторий содержит бинарник с именем APP, его функция main() размещается в отдельном файле cmd/APP/main.go со следующим содержанием:\n1 2 3 4 5 6 7 8 9  //+build !test  // This file holds code which does not covered by tests  package main import \u0026#34;os\u0026#34; func main() { Run(os.Exit) }    log  для случаев, отличных от примитивных, необходима возможность парсить логи приложения. Тут мой выбор - structured logging и вариант его реализации - zap вместе с этим, зашивать конкретную имплементацию журналирования мне представляется не оптимальным, поэтому в пакетах использую logr в тестах, если надо собрать логи и потом проанализировать, я использую genericr  log usage Ссылка на log не передается конструктору и не является глобальной переменной. Она передается в конкретном вызове или через контекст.\nПочему: В строку журнала может понадобиться добавить переменную со значением из текущего запроса (например - traceId, или еще что-то уровнем выше текущего пакета)\nconfig Для конфигурации приложения наиболее характерный пример для меня - использование библиотеки, у которой есть свой конфиг, при обновлении которого я бы не хотел ничего менять в своем приложении. Я использую go-flags и выглядит это так:\n1 2 3 4 5 6  type Config struct { Addr string `long:\u0026#34;http_addr\u0026#34; default:\u0026#34;localhost:8080\u0026#34; description:\u0026#34;Http listen address\u0026#34;` FS lookupfs.Config `group:\u0026#34;Filesystem Options\u0026#34; namespace:\u0026#34;fs\u0026#34; env-namespace:\u0026#34;FS\u0026#34;` API procapi.Config `group:\u0026#34;API Options\u0026#34; namespace:\u0026#34;api\u0026#34; env-namespace:\u0026#34;API\u0026#34;` }   pg Однажды, в mqbridge, мне понадобилось работать с каналом (db.Listen(channel).Channel()), для этого я выбрал go-pg. В остальных случаях использую pgx\nembedding Выбор пакета для меня определяется ответом на вопрос - \u0026ldquo;Нужна ли UnionFS\u0026rdquo; (т.е. возможность локальным файлом заменить какой-то файл из дистрибутива)\n если нужна - go-imbed если нет - parcello  Начиная с go 1.16, первичный вариант решения - embed\ndeploy Тут все очевидно. Как автор dcape, деплой всех своих приложений я делаю так. Другие варианты - это уже подарки тестовых задач. Добавлю, что, на мой взгляд, навык заворачивания приложения в docker я считаю полезным для программиста, а опыт управления kubernetes - нет. По двум причинам (k8s не единственный и не последний. Разве это не экспертиза уровня webpack?)\n  ","description":"Решения типовых задач","id":9,"section":"notes","tags":null,"title":"GoLang Solutions","uri":"https://lekovr.github.io/notes/golang/"},{"content":"В SQL мне наиболее интересна работа с хранимым кодом в PostgreSQL, но до того, чтобы собрать отдельный справочник, руки пока не доходят. Поэтому наполнение этой страницы еще в начальной стадии\nПример теста 1 2 3 4 5 6 7 8 9 10 11 12  SAVEPOINT test_begin; select pgmig.assert_count(1); -- ---------------------------------------------------------------------------- SELECT pgmig.pkg_op_before(\u0026#39;init\u0026#39;, \u0026#39;test_pgmig\u0026#39;, \u0026#39;v0.0\u0026#39;, \u0026#39;git\u0026#39;); SELECT pgmig.assert_eq(\u0026#39;pkg_op_before\u0026#39; , (SELECT jsonb_build_object(\u0026#39;code\u0026#39;,code,\u0026#39;version\u0026#39;,version) FROM pgmig.pkg where code=\u0026#39;test_pgmig\u0026#39;) , \u0026#39;{ \u0026#34;version\u0026#34;: \u0026#34;v0.0\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;test_pgmig\u0026#34; }\u0026#39;::jsonb ); ROLLBACK TO SAVEPOINT test_begin;   Мой топ в апреле 2022 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  select r.* , abs.abs_rank , cl.cl_rank from results r left join ( select id , row_number() over() as abs_rank from results where in_abs=1 ) abs using(id) , lateral ( select * --coalesce(cl_rank,null) as cl_rank  from ( select id , case when r.cl_next is null then null else row_number() over(partition by cl_next order by drv1_id) end as cl_rank from results r2 where r.cl_next is null or r.cl_next = any(r2.cls) ) cll where id = r.id ) cl ;   См. также\n pgmig-sql pomasql-md pgmig  ","description":"Решения для SQL","id":10,"section":"notes","tags":null,"title":"SQL Solutions","uri":"https://lekovr.github.io/notes/sql/"},{"content":"   Приложение pgws     назначение технология создания АПИ для хранимых функций Postgresql и автоматического их проксирования http-клиентам    ","description":"Postgresql webservices","id":11,"section":"archive","tags":null,"title":"pgws","uri":"https://lekovr.github.io/archive/projects/pgws/"},{"content":"Когда-то однажды, в 1998м году, я готовился к релокации в Англию. В какой-то момент уровень моей подготовки был сформулирован как \u0026ldquo;подгони разговорный и мы тебя заберем\u0026rdquo;. Я нашел местную школу с \u0026ldquo;native speaking teachers\u0026rdquo; и их входной тест показал уровень \u0026ldquo;Intermediate\u0026rdquo;. На сегодня для меня это - давно забытый рекорд. Я могу читать и писать, до сих пор основная часть моих знаний приходит из текстов на английском. Но вот \u0026ldquo;участвовать в митингах\u0026rdquo; - тут извините.\nВозможно, я стану лучше, но пока, когда я вижу у вакансии \u0026ldquo;разговорный английский\u0026rdquo; или \u0026ldquo;митинги на английском\u0026rdquo;, мне это видится так:\n работа на галере, где придется лично разруливать запросы иностранного заказчика (вот такое я даже на русском не хочу) в команде - \u0026ldquo;индусы\u0026rdquo; и тебе придется на чужом для тебя языке разжевывать им, где они тупят  Тут, в общем, такая проблема - это всё добавляет дискомфорт, за который я захочу дополнительные деньги. И в итоге получится такая большая сумма, что мне, собственно, столько и не надо. Ну, т.е. это как в золотари меня позвать (если кто понял)\n","description":"Some thoughts about foreign languages","id":12,"section":"notes","tags":null,"title":"English","uri":"https://lekovr.github.io/notes/english/"},{"content":"PoGoDo - это сокращеный вариант обозначения проектов, использующих следующие технологии:\n postgesql - данные размещены в этой СУБД golang - интерфейс к данным реализован на этом ЯП docker - деплой приложения использует такие контейнеры  ","description":"Postgresql + Golang + Docker projects","id":13,"section":"","tags":null,"title":"PoGoDo","uri":"https://lekovr.github.io/pogodo/"},{"content":"modGD graphing module - Библиотека на Си для построения графиков по XML спецификации.\nИспользует libgd2 и libxml2. Это - коммерческий проект для английского знакомого моего бывшего коллеги и демку не выложить, но познакомиться с C программированием под Linux мне было интересно. Особенно в части .so и CGI.\nЯ подобным занимался и в универе и в 95м, потому и согласился. Наиболее запомнилась боль, вызванная необходимостью писать на С при знании, что на С++ все было бы проще. Тем не менее, я успел вывести проект на 70% (на мой взгляд) готовности до того, как заказчик передумал решать задачу таким путем.\nНиже приведены диаграммы, которые к этому моменту (modgd v0.0.73) делала библиотека.\n   1 Dataset 2 Datasets     bar.xml bars.xml   line.xml lines.xml   pie.xml pies.xml   point.xml points.xml    ","description":"","id":14,"section":"archive","tags":null,"title":"modgd","uri":"https://lekovr.github.io/archive/projects/200x/modgd/"},{"content":"Это, как-бы, пилот того, что мне хотелось вложить в понятие \u0026ldquo;веб-движок\u0026rdquo;. Некое универсальное ядро, лишенное известных мне недостатков известных мне движков. В частности, хотелось, чтобы\n адрес любой страницы был коротким и читабельным, а не содержал сотню понятных только самому движку символов даже запароленную страницу можно было добавить в закладки и потом это работало писать всякие модули вроде форума и голосования под это было легко и удобно  В общем, много чего хотелось. И что-то из этого получилось. Сайты на этом движке попали в webarchive:\n farma.ru price.kuban.su podpiska.kuban.su  Ниже приведена документация оригинального проекта\nПроект JAST Just Another Server Toolkit - это основанный на GNU GPL набор perl-модулей, призванный облегчить создание и поддержку интенсивно использующих СУБД web-сайтов некоторых типов. Проект был в активной фазе в 2001м году и далее приводятся тексты из описаний того времени.\nСайты В настоящий момент каждый разрабатываемый сайт имеет как минимум две инсталляции - опытную и промышленную (не считая development версий, доступных только в LAN). Опытные инсталляции предназначены для тестирования, ознакомления, обучения и\nне содержат корректной и реальной информации. Все официальные данные публикуются только на официальных сайтах.\n   Проект Официальный сайт Версия JAST Версия сайта     Прайс-листы фармацевтики www.farma.ru 0.1 0.1   Что? Где? Почем? Краснодар www.price.kuban.su 0.1 0.1   Каталог подписных изданий www.podpiska.kuban.su 0.1 0.0.81    Новости 24.12.01 JAST v0.1 установлен на www.farma.ru и тестовых версиях сайтов.\n23.12.01 Первый публичный релиз JAST v0.1 установлен на www.price.kuban.su. Цель, появившаяся в июле 1999г, вошедшая в число текущих задач в июле 2000 и оформившаяся в код в августе 2001, достигнута.\nИменно этому коду будет присвоен номер 1.1 после решения вопросов лицензирования и структуры дистрибутива.\n22.12.01 v0.0.85 установлена на www.farma.ru и тестовых версиях сайтов.\n21.12.01 v0.0.83 установлена на www.farma.ru и тестовых версиях сайтов. Тесты обнаружили некоторые баги в работе каунтера, что повлекло выпуск релиза 0.0.84 в 8 p.m. того же дня.\n17.12.01 Сайт www.farma.ru перенесен с www.price.farma.ru и открыт для публичного доступа, произведена установка всех тестовых версий сайтов.\n16.12.01  Запущен сайт www.price1.kuban.su. www.podpiska.kuban.su переведен на JAST v0.0.81  16.10.01 Для авторизованных тестеров запущен сайт www.price.farma.ru\n15.10.01 www.podpiska.kuban.su переведен на JAST v0.0.71\n10.10.01 Ветка JAST признана основной, релиз 0.0.70 помещен в cvs репозиторий\n19.08.01 www.podpiska.kuban.su переведен на JAST v0.0.70pre2\n4.08.01 Работы над веткой JAST возобновлены\n8.05.01  Открыт сайт www.podpiska.kuban.su (JAST v0.0.70pre1) Работа над проектом JAST приостановлена  Технологии Использующие JAST сайты работают на серверах, оборудованных следующим:\n ASPLinux Russian Apache mod_perl PostgreSQL Mason и десяток других модулей от CPAN  ","description":"","id":15,"section":"archive","tags":null,"title":"Just Another Server Toolkit","uri":"https://lekovr.github.io/archive/projects/200x/jast/"},{"content":"                           Plk 1\n      Plk 2\n      Plk 3\n      web.archive.org сохранил, как это выглядело.\nПриятно вспомнить о проекте, созданном за полтора месяца, и проработавшем 2,5 года (1.07.99 - 23.12.01) до переезда на HTML::Mason.\nЭто мой первый коммерческий проект и для web и на perl. ТЗ, верстку и код я делал сам. Подробности были изложены на странице, которую я здесь и процитирую..\nДалее - цитаты из www.price.kuban.su/about\nВозможности Для покупателей  Любой прайс из газеты \u0026ldquo;Что? Где? Почем?\u0026rdquo; на Вашем компьютере. Возможности поиска по разделу минимальны, но есть. Иногда посмотреть здесь прайсы проще, чем скачать архивы с нескольких сайтов, а иногда только здесь эти прайс-листы и есть.  Для продавцов  Ваш прайс публикуется в Интернет без ваших усилий (если вы - клиент ОКЕЙ Пресс) и\tс минимальными усилиями (если вы - просто вы Вы можете просто и бесплатно завести свой первый адрес в интернет, размещать прайс-лист и увидеть, насколько это Вам выгодно  Почему все так, как оно тут Одной из главных целей проекта была минимальная себестоимость. Эта цель достигнута вполне. Основная часть проекта была реализована в течение нескольких недель в свободное от 8и часовой работы время. И получилась, возможно, вполне интересная база для дальнейшей работы. И эта работа ведется. С постоянным контролем за экономической целесообразностью проекта. Наш принцип - целевые инвестиции и быстрая окупаемость.\nДругая цель проекта - предоставлять посетителям сайта именно прайс-листы, а не анализ и сравнение цен разных продавцов. Это было изначальным условием. Оно изменится, конечно, но пока это еще так.\nБезусловно, дизайн сервера довольно примитивен. Но это, всего лишь, следствие того, что пока не нашлось дизайнера, предложившего свои услуги не на заказ (заказы на дизайн стоят в плане следующей версии), а просто потому, что он хочет реализовать себя в этом проекте. Оплата другого дизайна не была бы вопросом. Но пока актуальнее сама идея. Информация - прежде всего. И, если говорить о функциональности сервера, когда Вы найдете в Рунете другой сайт, где можно за несколько минут бесплатно разместить прайс на несколько сотен позиций - сообщите нам. Мы укажем адрес здесь: []\nИстория Идея проекта с его текущим наполнением оформилась в конце 1998 года. Последующий поиск хостера и общение с агенством ОКЕЙ-Пресс привели к тому, что 14 апреля 99г. по адресу price.kuban.su была запущена 1я пилотная версия проекта (v0.11). Движок был основан на данных из flat-файлов и имел весьма ограниченные возможности по администрированию и поддержке. Тем не менее, сайт работал и стало ясно, что работать будет.\nТекущая версия движка основана на Perl и PostgreSQL, что позволило обеспечить работу пользователей и администраторов разделов через web-интерфейс. Новая версия сервера (v1.22) была запущена в опытную эксплуатацию 1 июля 1999г. и просуществовала практически неизменно до 4 ноября 2000. Достаточно, если не сказать слишком долго для еженедельно обновляемого сайта, но на то были свои причины.\n5 и 6 ноября произведены некоторые изменения внешнего вида и расширено использование SSI (v1.23).\nCуществует, конечно, вероятность что эти изменения породили какие-нибудь ошибки. Срок опытной эксплуатации v1.23 - c 6 по 30 ноября 2000г.\n7 апреля 2001г. v1.24. Незначительные изменения в функциях администрирования и теперь, кроме даты прайс-листа,\nсписок фирм содержит общее количество строк каждого прайса.\nПроект открыт для любых форм участия. Если у вас есть пожелания, предложения или вы хотите присоединится - свяжитесь с нами. Мы не считаем текущую версию законченным решением. Список ToDo следующей версии содержит несколько сотен позиций. А может, как раз Вас нам и не хватает?\n","description":"Первый проект на perl","id":16,"section":"archive","tags":null,"title":"Прайс-листы Кубани","uri":"https://lekovr.github.io/archive/projects/199x/plk/"},{"content":"Дизайнwww.kuban.su\n  Это не проект даже, а просто подарок провайдеру нового вида страницы, по ссылке с которой, как оказалось, приходит довольно много посетителей. Кому-то эта нарисованная в августе 1999 года картинка, может и покажется симпатичной, но для меня это еще одно доказательство того, что я не дизайнер и этим должны заниматься другие ;)   И пару слов о фотографии, которая висит на этом же сайте и является составной частью оформления. Снимок сделан в Долине очарования цифровым фотоаппаратом и, хотя на полной версии снимка запечатлен не я, право публиковать это изображение у меня есть ;)   ","description":"Я не дизайнер, но однажды попробовал","id":17,"section":"archive","tags":null,"title":"'Дизайн' kuban.su","uri":"https://lekovr.github.io/archive/projects/199x/kuban/"},{"content":"                           Tx2graph 1\n      Tx2graph 2\n      Tx2graph 3\n      Tx2graph 4\n      Tx2graph 5\n     Программа для построения графиков по текстовым файлам. Альтернатива парадоксовскому модулю графики, адаптированная для презентабельного представления необходимого количества значений (до 25).\nВызывалась из скриптов Paradox 4.5 (DOS) для графического вывода аналитических показателей.\nСкриншоты выше не имеют увеличенного представления, т.к. IMHO и так все понятно и разбираться, есть ли в показанных числах коммерческая тайна, смысла не имеет ;)\nВсе приведенные скриншоты сделаны с одного набора данных. Тип графика, наличие меток и т.п. может быть задано при запуске или из меню программы. Также реализована поддержка просмотра фактических значений по каждому показателю и печать графика на матричный принтер.\nРазмер исходных текстов - 56К, .exe файла - 71К, время написания - 1995г.\nИз документации:\n Программа графического представления данных предназначена для облегчения анализа расчетных данных,\nполученных с помощью программного обеспечения банка. Ограниченность функций данной программы обусловлена требованием компактности загружаемого кода и нецелесообразностью попыток достичь собственными средствами уровня существующих графических пакетов. Отличительными особенностями данной программы являются ее ориентация на существующую в банке организацию информации, учет основных пожеланий конечных пользователей и возможность загрузки программы непосредственно из среды Paradox.\n ","description":"Диаграммы для Paradox","id":18,"section":"archive","tags":null,"title":"tx2graph (C)","uri":"https://lekovr.github.io/archive/projects/199x/c/"},{"content":"Все размещенные здесь архивы содержат исходные тексты программ, написанных мной, и\nопубликованы на условиях GPL.\nСомневаюсь, что это может быть интересно или полезно кому - нибудь, но - purcua pa? ;)\nResource manager (Modula)    Архив Назначение     resman.zip Предотвращение тупиков с использованием алгоритма банкира    Это - оригинальный дистрибутив зачетной задачи, реализованной за одну ночь в октябре 1993г по технологии, которую я бы тогда назвал \u0026ldquo;парное программирование\u0026rdquo; ;-). Суть ее была в том, что участник-1 получает доступ к терминалу на 1 час, после чего распечатывает результат и в течение следующего часа анализирует распечатку, пока участник-2 пользуется терминалом. Вот так мы за ночь с моим кумом Юрой Хомутовым сделали наши зачетные задачи на ВЦ, где работали его родители.\nКодировка исходников - 866. Исполняемый файл из архива, по состоянию на 7.04.2021, рабочий, команда запуска под linux: dosbox TASKBODY.EXE\nClubJES (Clarion)    Архив Назначение     clubjes.zip Программа для учета того, что Вы отдали кому-то и того, что Вы взяли у кого-то    Эта программа была написана для того, чтобы определить, сколько времени нужно для написания минимального приложения на незнакомой платформе. Получилось 3 часа ;-)\nКодировка исходников - 866, исполняемый файл из архива, по состоянию на 7.04.2021, рабочий, но интерфейс содержит кириллицу и я пока не копал, как это победить в dosbox.\nJESICA (C)    Архив Назначение     jesica.zip Фреймфорк для оформления зачетных задач    Основная цель данной разработки - стандартизация интерфейса вычислительных задач посредством создания универсальной библиотеки сервисного ввода - вывода, свободно подключаемой к широкому классу вычислительных задач. Другими словами, это оболочка, подключаемая к различным зачетным задачам, предназначенная для создания комфортных условий ввода исходных данных и просмотра результатов работы алгоритмов (термин \u0026ldquo;Фреймфорк\u0026rdquo; тогда не использовали).\nИнтерфейс программы в основном соответствует стилю IDE (меню динамического доступа, выход по Alt-X, клавишная подсказка, горячие клавиши и т.д.).\nОсновные особенности оболочки\n Независимость горячих клавиш от состояния клавиатуры Постоянное присутствие полной подсказки на экране  логическая подсказка - окно \u0026lsquo;Комментарий\u0026rsquo; клавишная подсказка - последняя строка экрана    Эту библиотеку я далее использовал во всех своих зачетных задачах:\nМетод обратного вывода Архив: es1.zip\nПрограмма для определения выводимости символов - заключений продукций методом обратного вывода с использованием стратегии приоритетов.\nВходные данные : список продукций (заключение и от 1й до 4х посылок )\nОсобенности реализации алгоритма\n Память для данных выделяется динамически Основная структура данных - частично-древовидная сеть Истинность аксиом определяется интерактивно Возможно обоснование результатов вывода  Поиск простых циклов в графе Архив: ds1.zip\nПрограмма для выявления простых циклов в графе.\nОсобенности реализации алгоритма\n Память для данных выделяется динамически Ограничение на количество ребер используется исключительно для удобства ввода списка ребер При суммировании учитываются циклические ребра Обозначение вершин произвольно  Локализация в ППЛГ Архив: ds2.zip\nПрограмма для локализации точки относительно ППЛГ методом трапеций. Входными данными является список ребер ППЛГ.\n","description":"зачетные задачи","id":19,"section":"archive","tags":null,"title":"Си и Модула","uri":"https://lekovr.github.io/archive/projects/199x/ksu93/"}]